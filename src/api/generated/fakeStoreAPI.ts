/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * FakeStoreAPI
 * A free fake API for testing and prototyping e-commerce applications.
 * OpenAPI spec version: 2.1.5
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  Cart,
  Login,
  LoginResponse,
  Product,
  User
} from '../models'
import { customInstance } from '../axiosInstance';



/**
 * Retrieve a list of all available products.
 * @summary Get all products
 */
export const getAllProducts = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<Product[]>(
      {url: `/products`, method: 'GET', signal
    },
      );
    }
  

export const getGetAllProductsQueryKey = () => {
    return [`/products`] as const;
    }

    
export const getGetAllProductsQueryOptions = <TData = Awaited<ReturnType<typeof getAllProducts>>, TError = void>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllProducts>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllProductsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllProducts>>> = ({ signal }) => getAllProducts(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllProducts>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllProductsQueryResult = NonNullable<Awaited<ReturnType<typeof getAllProducts>>>
export type GetAllProductsQueryError = void


export function useGetAllProducts<TData = Awaited<ReturnType<typeof getAllProducts>>, TError = void>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllProducts>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllProducts>>,
          TError,
          Awaited<ReturnType<typeof getAllProducts>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllProducts<TData = Awaited<ReturnType<typeof getAllProducts>>, TError = void>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllProducts>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllProducts>>,
          TError,
          Awaited<ReturnType<typeof getAllProducts>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllProducts<TData = Awaited<ReturnType<typeof getAllProducts>>, TError = void>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllProducts>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get all products
 */

export function useGetAllProducts<TData = Awaited<ReturnType<typeof getAllProducts>>, TError = void>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllProducts>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllProductsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Create a new product.
 * @summary Add a new product
 */
export const addProduct = (
    product: Product,
 signal?: AbortSignal
) => {
      
      
      return customInstance<Product>(
      {url: `/products`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: product, signal
    },
      );
    }
  


export const getAddProductMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addProduct>>, TError,{data: Product}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof addProduct>>, TError,{data: Product}, TContext> => {
    
const mutationKey = ['addProduct'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addProduct>>, {data: Product}> = (props) => {
          const {data} = props ?? {};

          return  addProduct(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AddProductMutationResult = NonNullable<Awaited<ReturnType<typeof addProduct>>>
    export type AddProductMutationBody = Product
    export type AddProductMutationError = void

    /**
 * @summary Add a new product
 */
export const useAddProduct = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addProduct>>, TError,{data: Product}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof addProduct>>,
        TError,
        {data: Product},
        TContext
      > => {

      const mutationOptions = getAddProductMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * Retrieve details of a specific product by ID.
 * @summary Get a single product
 */
export const getProductById = (
    id: number,
 signal?: AbortSignal
) => {
      
      
      return customInstance<Product>(
      {url: `/products/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetProductByIdQueryKey = (id: number,) => {
    return [`/products/${id}`] as const;
    }

    
export const getGetProductByIdQueryOptions = <TData = Awaited<ReturnType<typeof getProductById>>, TError = void>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductById>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProductByIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProductById>>> = ({ signal }) => getProductById(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProductById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProductByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getProductById>>>
export type GetProductByIdQueryError = void


export function useGetProductById<TData = Awaited<ReturnType<typeof getProductById>>, TError = void>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductById>>,
          TError,
          Awaited<ReturnType<typeof getProductById>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProductById<TData = Awaited<ReturnType<typeof getProductById>>, TError = void>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductById>>,
          TError,
          Awaited<ReturnType<typeof getProductById>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProductById<TData = Awaited<ReturnType<typeof getProductById>>, TError = void>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductById>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get a single product
 */

export function useGetProductById<TData = Awaited<ReturnType<typeof getProductById>>, TError = void>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductById>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProductByIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Update an existing product by ID.
 * @summary Update a product
 */
export const updateProduct = (
    id: number,
    product: Product,
 ) => {
      
      
      return customInstance<Product>(
      {url: `/products/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: product
    },
      );
    }
  


export const getUpdateProductMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateProduct>>, TError,{id: number;data: Product}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateProduct>>, TError,{id: number;data: Product}, TContext> => {
    
const mutationKey = ['updateProduct'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateProduct>>, {id: number;data: Product}> = (props) => {
          const {id,data} = props ?? {};

          return  updateProduct(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateProductMutationResult = NonNullable<Awaited<ReturnType<typeof updateProduct>>>
    export type UpdateProductMutationBody = Product
    export type UpdateProductMutationError = void

    /**
 * @summary Update a product
 */
export const useUpdateProduct = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateProduct>>, TError,{id: number;data: Product}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof updateProduct>>,
        TError,
        {id: number;data: Product},
        TContext
      > => {

      const mutationOptions = getUpdateProductMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * Delete a specific product by ID.
 * @summary Delete a product
 */
export const deleteProduct = (
    id: number,
 ) => {
      
      
      return customInstance<void>(
      {url: `/products/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteProductMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteProduct>>, TError,{id: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteProduct>>, TError,{id: number}, TContext> => {
    
const mutationKey = ['deleteProduct'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteProduct>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteProduct(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteProductMutationResult = NonNullable<Awaited<ReturnType<typeof deleteProduct>>>
    
    export type DeleteProductMutationError = void

    /**
 * @summary Delete a product
 */
export const useDeleteProduct = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteProduct>>, TError,{id: number}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof deleteProduct>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteProductMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * Retrieve a list of all available carts.
 * @summary Get all carts
 */
export const getAllCarts = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<Cart[]>(
      {url: `/carts`, method: 'GET', signal
    },
      );
    }
  

export const getGetAllCartsQueryKey = () => {
    return [`/carts`] as const;
    }

    
export const getGetAllCartsQueryOptions = <TData = Awaited<ReturnType<typeof getAllCarts>>, TError = void>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllCarts>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllCartsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllCarts>>> = ({ signal }) => getAllCarts(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllCarts>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllCartsQueryResult = NonNullable<Awaited<ReturnType<typeof getAllCarts>>>
export type GetAllCartsQueryError = void


export function useGetAllCarts<TData = Awaited<ReturnType<typeof getAllCarts>>, TError = void>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllCarts>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllCarts>>,
          TError,
          Awaited<ReturnType<typeof getAllCarts>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllCarts<TData = Awaited<ReturnType<typeof getAllCarts>>, TError = void>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllCarts>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllCarts>>,
          TError,
          Awaited<ReturnType<typeof getAllCarts>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllCarts<TData = Awaited<ReturnType<typeof getAllCarts>>, TError = void>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllCarts>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get all carts
 */

export function useGetAllCarts<TData = Awaited<ReturnType<typeof getAllCarts>>, TError = void>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllCarts>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllCartsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Create a new cart.
 * @summary Add a new cart
 */
export const addCart = (
    cart: Cart,
 signal?: AbortSignal
) => {
      
      
      return customInstance<Cart>(
      {url: `/carts`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: cart, signal
    },
      );
    }
  


export const getAddCartMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addCart>>, TError,{data: Cart}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof addCart>>, TError,{data: Cart}, TContext> => {
    
const mutationKey = ['addCart'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addCart>>, {data: Cart}> = (props) => {
          const {data} = props ?? {};

          return  addCart(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AddCartMutationResult = NonNullable<Awaited<ReturnType<typeof addCart>>>
    export type AddCartMutationBody = Cart
    export type AddCartMutationError = void

    /**
 * @summary Add a new cart
 */
export const useAddCart = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addCart>>, TError,{data: Cart}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof addCart>>,
        TError,
        {data: Cart},
        TContext
      > => {

      const mutationOptions = getAddCartMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * Retrieve details of a specific cart by ID.
 * @summary Get a single cart
 */
export const getCartById = (
    id: number,
 signal?: AbortSignal
) => {
      
      
      return customInstance<Cart>(
      {url: `/carts/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetCartByIdQueryKey = (id: number,) => {
    return [`/carts/${id}`] as const;
    }

    
export const getGetCartByIdQueryOptions = <TData = Awaited<ReturnType<typeof getCartById>>, TError = void>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCartById>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCartByIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCartById>>> = ({ signal }) => getCartById(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCartById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCartByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getCartById>>>
export type GetCartByIdQueryError = void


export function useGetCartById<TData = Awaited<ReturnType<typeof getCartById>>, TError = void>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCartById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCartById>>,
          TError,
          Awaited<ReturnType<typeof getCartById>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCartById<TData = Awaited<ReturnType<typeof getCartById>>, TError = void>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCartById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCartById>>,
          TError,
          Awaited<ReturnType<typeof getCartById>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCartById<TData = Awaited<ReturnType<typeof getCartById>>, TError = void>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCartById>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get a single cart
 */

export function useGetCartById<TData = Awaited<ReturnType<typeof getCartById>>, TError = void>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCartById>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCartByIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Update an existing cart by ID.
 * @summary Update a cart
 */
export const updateCart = (
    id: number,
    cart: Cart,
 ) => {
      
      
      return customInstance<Cart>(
      {url: `/carts/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: cart
    },
      );
    }
  


export const getUpdateCartMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateCart>>, TError,{id: number;data: Cart}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateCart>>, TError,{id: number;data: Cart}, TContext> => {
    
const mutationKey = ['updateCart'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateCart>>, {id: number;data: Cart}> = (props) => {
          const {id,data} = props ?? {};

          return  updateCart(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateCartMutationResult = NonNullable<Awaited<ReturnType<typeof updateCart>>>
    export type UpdateCartMutationBody = Cart
    export type UpdateCartMutationError = void

    /**
 * @summary Update a cart
 */
export const useUpdateCart = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateCart>>, TError,{id: number;data: Cart}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof updateCart>>,
        TError,
        {id: number;data: Cart},
        TContext
      > => {

      const mutationOptions = getUpdateCartMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * Delete a specific cart by ID.
 * @summary Delete a cart
 */
export const deleteCart = (
    id: number,
 ) => {
      
      
      return customInstance<void>(
      {url: `/carts/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteCartMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteCart>>, TError,{id: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteCart>>, TError,{id: number}, TContext> => {
    
const mutationKey = ['deleteCart'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteCart>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteCart(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteCartMutationResult = NonNullable<Awaited<ReturnType<typeof deleteCart>>>
    
    export type DeleteCartMutationError = void

    /**
 * @summary Delete a cart
 */
export const useDeleteCart = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteCart>>, TError,{id: number}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof deleteCart>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteCartMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * Retrieve a list of all users.
 * @summary Get all users
 */
export const getAllUsers = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<User[]>(
      {url: `/users`, method: 'GET', signal
    },
      );
    }
  

export const getGetAllUsersQueryKey = () => {
    return [`/users`] as const;
    }

    
export const getGetAllUsersQueryOptions = <TData = Awaited<ReturnType<typeof getAllUsers>>, TError = void>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllUsers>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllUsersQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllUsers>>> = ({ signal }) => getAllUsers(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllUsers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllUsersQueryResult = NonNullable<Awaited<ReturnType<typeof getAllUsers>>>
export type GetAllUsersQueryError = void


export function useGetAllUsers<TData = Awaited<ReturnType<typeof getAllUsers>>, TError = void>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllUsers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllUsers>>,
          TError,
          Awaited<ReturnType<typeof getAllUsers>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllUsers<TData = Awaited<ReturnType<typeof getAllUsers>>, TError = void>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllUsers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllUsers>>,
          TError,
          Awaited<ReturnType<typeof getAllUsers>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllUsers<TData = Awaited<ReturnType<typeof getAllUsers>>, TError = void>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllUsers>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get all users
 */

export function useGetAllUsers<TData = Awaited<ReturnType<typeof getAllUsers>>, TError = void>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllUsers>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllUsersQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Create a new user.
 * @summary Add a new user
 */
export const addUser = (
    user: User,
 signal?: AbortSignal
) => {
      
      
      return customInstance<User>(
      {url: `/users`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: user, signal
    },
      );
    }
  


export const getAddUserMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addUser>>, TError,{data: User}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof addUser>>, TError,{data: User}, TContext> => {
    
const mutationKey = ['addUser'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addUser>>, {data: User}> = (props) => {
          const {data} = props ?? {};

          return  addUser(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AddUserMutationResult = NonNullable<Awaited<ReturnType<typeof addUser>>>
    export type AddUserMutationBody = User
    export type AddUserMutationError = void

    /**
 * @summary Add a new user
 */
export const useAddUser = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addUser>>, TError,{data: User}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof addUser>>,
        TError,
        {data: User},
        TContext
      > => {

      const mutationOptions = getAddUserMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * Retrieve details of a specific user by ID.
 * @summary Get a single user
 */
export const getUserById = (
    id: number,
 signal?: AbortSignal
) => {
      
      
      return customInstance<User>(
      {url: `/users/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetUserByIdQueryKey = (id: number,) => {
    return [`/users/${id}`] as const;
    }

    
export const getGetUserByIdQueryOptions = <TData = Awaited<ReturnType<typeof getUserById>>, TError = void>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserById>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserByIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserById>>> = ({ signal }) => getUserById(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUserByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getUserById>>>
export type GetUserByIdQueryError = void


export function useGetUserById<TData = Awaited<ReturnType<typeof getUserById>>, TError = void>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserById>>,
          TError,
          Awaited<ReturnType<typeof getUserById>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserById<TData = Awaited<ReturnType<typeof getUserById>>, TError = void>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserById>>,
          TError,
          Awaited<ReturnType<typeof getUserById>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserById<TData = Awaited<ReturnType<typeof getUserById>>, TError = void>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserById>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get a single user
 */

export function useGetUserById<TData = Awaited<ReturnType<typeof getUserById>>, TError = void>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserById>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserByIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Update an existing user by ID.
 * @summary Update a user
 */
export const updateUser = (
    id: number,
    user: User,
 ) => {
      
      
      return customInstance<User>(
      {url: `/users/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: user
    },
      );
    }
  


export const getUpdateUserMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateUser>>, TError,{id: number;data: User}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateUser>>, TError,{id: number;data: User}, TContext> => {
    
const mutationKey = ['updateUser'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateUser>>, {id: number;data: User}> = (props) => {
          const {id,data} = props ?? {};

          return  updateUser(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateUserMutationResult = NonNullable<Awaited<ReturnType<typeof updateUser>>>
    export type UpdateUserMutationBody = User
    export type UpdateUserMutationError = void

    /**
 * @summary Update a user
 */
export const useUpdateUser = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateUser>>, TError,{id: number;data: User}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof updateUser>>,
        TError,
        {id: number;data: User},
        TContext
      > => {

      const mutationOptions = getUpdateUserMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * Delete a specific user by ID.
 * @summary Delete a user
 */
export const deleteUser = (
    id: number,
 ) => {
      
      
      return customInstance<void>(
      {url: `/users/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteUserMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteUser>>, TError,{id: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteUser>>, TError,{id: number}, TContext> => {
    
const mutationKey = ['deleteUser'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteUser>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteUser(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteUserMutationResult = NonNullable<Awaited<ReturnType<typeof deleteUser>>>
    
    export type DeleteUserMutationError = void

    /**
 * @summary Delete a user
 */
export const useDeleteUser = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteUser>>, TError,{id: number}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof deleteUser>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteUserMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * Authenticate a user.
 * @summary Login
 */
export const loginUser = (
    login: Login,
 signal?: AbortSignal
) => {
      
      
      return customInstance<LoginResponse>(
      {url: `/auth/login`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: login, signal
    },
      );
    }
  


export const getLoginUserMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof loginUser>>, TError,{data: Login}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof loginUser>>, TError,{data: Login}, TContext> => {
    
const mutationKey = ['loginUser'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof loginUser>>, {data: Login}> = (props) => {
          const {data} = props ?? {};

          return  loginUser(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type LoginUserMutationResult = NonNullable<Awaited<ReturnType<typeof loginUser>>>
    export type LoginUserMutationBody = Login
    export type LoginUserMutationError = void

    /**
 * @summary Login
 */
export const useLoginUser = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof loginUser>>, TError,{data: Login}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof loginUser>>,
        TError,
        {data: Login},
        TContext
      > => {

      const mutationOptions = getLoginUserMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
